/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_attack_object_suicide_bomb.skrit

	Author(s)	: 	Rick Saenz, Bartosz Kijanka

	Purpose		: 	Walk over to target and explode.

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
Job		m_Job$;
GoMind	m_Mind$;
Goid	m_Target$;

int explosion_pos$;
float damage$;
float radius$;
float magnitude$;

////////////////////////////////////////////////////////////////////////////////

#include "k_job_c_mcp_path_utils" 

////////////////////////////////////////////////////////////////////////////////
startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.GetGo;
	m_Mind$		= job$.GetGo.GetMind;
	m_Target$	= job$.GoalObject;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	ResetPathFindingParameters$();

	SetState( RequestAction$ );
}


state RequestAction$
{
	// used to always just go to TargetMoved if the dependency was broken. 
	// Now we are going to check to see if we are swinging before allowing our dependency to be broken.
	trigger OnWorldMessage$( WE_MCP_DEPENDANCY_BROKEN )
	{
		//current chore...
		eAnimChore ch$ = m_Go$.Aspect.AspectHandle.GetCurrentChore();
				
		if( ch$ != CHORE_ATTACK )
		{
//			report.generic("Target is moving trying to re-target!!\n");
			setstate TargetMoved$;
		}
	}
	transition
	{
		-> Exploding$:		OnWorldMessage( WE_ANIM_WEAPON_FIRE );
  		-> Exiting$:		OnWorldMessage( WE_MCP_INVALIDATED );
		-> Exiting$: 		OnWorldMessage( WE_ENGAGED_INVALID );	// target lost or unloaded
		-> Exiting$:		OnWorldMessage( WE_ENGAGED_FLED );
	}

	event OnEnterState$
	{
		report.generic("JAOSB: RequestAction\n");

		float m_RangeToTarget$ = m_Go$.mind.PersonalSpaceRange + m_Go$.Attack.AttackRange;
		m_RangeToTarget$ += m_Target$.go.HasMind() ? m_Target$.go.mind.PersonalSpaceRange : m_Target$.go.aspect.BoundingSphereRadius;
		
		eReqRetCode ret$ = MCPManager.MakeRequest(	m_Go$.Goid,
													PL_ATTACK_OBJECT_MELEE,
													1.0,
													m_Target$,
													m_LookAhead$, 
													m_MaxApproachTime$,
													m_RangeToTarget$ );
		if( RequestFailed(ret$) )
		{
			m_Job$.MarkForDeletion( JR_FAILED_NO_PATH );
			SetState( Exiting$ );
		}
	}
}


state Exploding$
{
	event OnEnterState$
	{
		report.generic("JAOSB: Exploding\n");
		// do it here - in state RequestAction$ it's too early(?!?) to calculate these properly
		float damageMin$ = m_Go$.Attack.DamageMin + m_Go$.Magic.EvaluateAttackDamageModifierMin(m_Go$, m_Go$);
		float damageMax$ = m_Go$.Attack.DamageMax + m_Go$.Magic.EvaluateAttackDamageModifierMax(m_Go$, m_Go$);
		damage$ = Math.RandomFloat( damageMin$, damageMax$ );
		radius$ = m_Go$.Attack.AreaDamageRadius;
		magnitude$ = m_Go$.Physics.ExplosionMagnitude;
		explosion_pos$ = SiegeFX.AddVariable( m_Go$.placement.position, m_Go$.Goid );  // preserving pos after go is gone

		// create the explosion to damage the surrounding enemies
		report.genericf("Exploding to attack with damage %g, radius %g, magnitude %g\n", damage$, radius$, magnitude$);
		Physics.CreateExplosion( SiegeFX.GetVariable(explosion_pos$, m_Go$.Goid), radius$, magnitude$, damage$, m_Go$.Goid, m_Go$.Goid );

		// doing f*ckall damage as damage is set to 0 in actor's [attack]
		// this is for the visual, and to remove the actor
		if (!Physics.ExplodeGoWithDamage( m_Go$.Goid, m_Go$.Goid, m_Go$.Goid ))
		{
			report.generic("JAOSB: ExplodeGoWithDamage failed\n");
			GoDb.SMarkGoAndChildrenForDeletion( m_Go$.GetGoid );
		}

		this.CreateTimer( 1, 1.0 );  // Give the explosion a little time to do its damage
		// 1s is sufficient for both Proxo and Blazing Elemental (duration = radius / magnitude)
	}

	transition -> Exiting$: OnTimer( 1 );
}


state Exiting$
{
	event OnEnterState$
	{
		report.generic("JAOSB: Exiting\n");
		SiegeFx.ClearVariables( m_Go$.goid );

		m_Job$.MarkForDeletion();
	}
}
