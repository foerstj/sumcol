/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_die_explode.skrit

	Author(s)	: 	Eric Tams

	Purpose		: 	explode actor on die/explode key in animation.

	(C)opyright 2000 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;

int explosion_pos$;
float damage$;
float radius$;
float magnitude$;


startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.GetGo;
	m_Mind$		= job$.GetGo.GetMind;
	m_Body$		= job$.GetGo.GetBody;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	SetState Collapsing$;
}


state Collapsing$
{
	transition
	{
		-> Exploding$:	OnWorldMessage( WE_ANIM_DONE );
		-> Exploding$:	OnWorldMessage( WE_ANIM_DIE );
	}

	event OnEnterState$
	{
		report.generic("JDE: Collapsing\n");

		// do it here - in state Exploding$ it's too late(?) to calculate these properly
		float damageMin$ = m_Go$.Attack.DamageMin + m_Go$.Magic.EvaluateAttackDamageModifierMin(m_Go$, m_Go$);
		float damageMax$ = m_Go$.Attack.DamageMax + m_Go$.Magic.EvaluateAttackDamageModifierMax(m_Go$, m_Go$);
		damage$ = Math.RandomFloat( damageMin$, damageMax$ );
		radius$ = m_Go$.Attack.AreaDamageRadius;
		magnitude$ = m_Go$.Physics.ExplosionMagnitude;
		explosion_pos$ = SiegeFX.AddVariable( m_Go$.placement.position, m_Go$.Goid );  // preserving pos after go is gone

		// Pick a Random animation to used
		eAnimStance stance$ = m_Go$.inventory.animstance;
		int subanim$ = m_Go$.Aspect.AspectHandle.Blender.GetNumSubAnims(CHORE_DIE,stance$);
		subanim$ = Math.RandomInt(0, Math.MaxInt( 0, subanim$-1 ) );

		MCPManager.Flush(m_Go$.Goid);
		MCPManager.MakeRequest( m_Go$.Goid, PL_DIE, subanim$ );
	}
}

state Exploding$
{
	event OnEnterState$
	{
		report.generic("JDE: Exploding\n");
		// create the explosion to damage the surrounding enemies
		report.genericf("Exploding on killed with damage %g, radius %g, magnitude %g\n", damage$, radius$, magnitude$);
		Physics.CreateExplosion( SiegeFX.GetVariable(explosion_pos$, m_Go$.Goid), radius$, magnitude$, damage$, m_Go$.Goid, m_Go$.Goid );

		m_Mind$.Clear();
		// doing f*ckall damage as damage is set to 0 in actor's [attack]
		// this is for the visual, and to remove the actor
		if (!Physics.ExplodeGoWithDamage( m_Go$.GetGoid, m_Go$.GetGoid, m_Go$.GetGoid ))
		{
			report.generic("JDE: ExplodeGoWithDamage failed\n");
			GoDb.SMarkGoAndChildrenForDeletion( m_Go$.GetGoid );
		}

		this.CreateTimer( 1, 1.0 );  // Give the explosion a little time to do its damage
		// 1s is sufficient for both Proxo and Blazing Elemental (duration = radius / magnitude)
	}

	transition -> Exiting$: OnTimer( 1 );
}

state Exiting$
{
	event OnEnterState$
	{
		report.generic("JDE: Exiting\n");
		SiegeFx.ClearVariables( m_Go$.goid );

		m_Job$.MarkForDeletion();
	}
}
