// Based on job_fidget_fairy.skrit - cast a spell while fidgeting

Go		m_Go$;
Go		m_Spell$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;

#include "k_job_c_mcp_fidget_utils"

bool GetSpell$( )
{
	m_Spell$ = m_Go$.Inventory.GetItem( il_active_secondary_spell );
    report.genericf("GetSpell$ %p\n", m_Spell$);
    return m_Spell$ != NULL;
}

bool TryResurrect$( )
{
    if( m_Spell$ == NULL )
    {
        return false;
    }

    m_Mind$.TempGopColl1.Clear;
    m_Mind$.TempGopColl2.Clear;

    AIQuery.GetOccupantsInSphere( m_Go$.Placement.Position, m_Mind$.SightRange, m_Mind$.tempGopColl1 );
    int i$ = 0;
    while( i$ < m_Mind$.tempGopColl1.Size() )
    {
        Go temp$ = m_Mind$.tempGopColl1.Get( i$ );
        i$ += 1;
        
        if( temp$ == NULL )
        {
            continue;
        }
        if( !temp$.HasAspect || !temp$.HasActor )
        {
            continue;
        }
        if( temp$.Actor.GetAlignment == AA_GOOD && IsDead( temp$.Aspect.GetLifeState() ) )
        {
            m_Mind$.TempGopColl2.add( temp$ );
        }
    }
    report.genericf("TryResurrect$: %i candidates for resurrection\n", m_Mind$.TempGopColl2.Size() );

    i$ = 0;
    while( i$ < m_Mind$.TempGopColl2.Size() )
    {
        Go temp$ = m_Mind$.TempGopColl2.Get( i$ );
        i$ += 1;

        if ( m_Mind$.GetDistance( temp$ ) > m_Spell$.Magic.CastRange )
        {
            continue;
        }
        if( m_Spell$.Magic.IsCastableOn( temp$ ))
        {
            report.genericf("TryResurrect$: Found resurrection target\n" );
            m_Mind$.SDoJob( MakeJobReq( JAT_CAST, JQ_ACTION, QP_FRONT, AO_REFLEX, temp$.goid, m_Spell$.Goid ) );
            return true;
        }
    }
    return false;
}

startup state Unknown$
{
}

event OnJobInitPointers$( Job job$ )
{
	m_Job$					= job$;
	m_Go$					= job$.Go;
	m_Mind$					= job$.Go.Mind;
	m_Body$					= job$.Go.Body;
}

event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	GetSpell$();

	SetState Wandering$;
}

state Wandering$
{
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		StartFidgetIfRequired$();
	}

	trigger OnTimer$( 1 )
	{
		bool resurrecting$ = TryResurrect$();
        if (resurrecting$)
        {
            This.CreateTimer( 1 , 5 );  // wait 5s to give the resurrect spell a bit of time if resurrection target found
        }
        else
        {
            This.CreateTimer( 1 , 1 );  // check again every second
        }
	}

	event OnEnterState$
	{
		StartFidgetIfRequired$();

		This.CreateTimer( 1 , 2 );  // initially wait 2s to avoid race condition of double casting due to job reset by spell_summon.skrit
	}
}
