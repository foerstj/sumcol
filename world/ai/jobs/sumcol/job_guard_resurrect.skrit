/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_guard.skrit

	Author(s)	: 	Bartosz Kijanka

	Purpose		: 	Guard another actor, but defend yourself if needed.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;
float	m_FollowDistance$;
float	m_ApproachDistance$;

////////////////////////////////////////////////////////////////////////////////


#include "k_job_c_attack_utils"
#include "k_job_c_mcp_path_utils"
#include "k_job_c_mcp_fidget_utils"


startup state STARTUP$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$					= job$;
	m_Go$					= job$.Go;
	m_Mind$					= job$.Go.Mind;
	m_Body$					= job$.Go.Body;
	m_FollowDistance$		= 2.5;
	m_ApproachDistance$		= 1.25;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	if (m_Target$.IsValidMp())
	{
		ResetPathFindingParameters$();
		SetState RequestAction$;
	} else {
		SetState Exiting$;
	}
	
}


////////////////////////////////////////////////////////////////////
//	global response to messages for me
event OnWorldMessage$( eWorldEvent e$, WorldMessage msg$ )
{
	// removing this will lead to access violations -bk
	if( e$ == WE_ENGAGED_LOST )
	{
	
	}
	else if ( e$ == WE_ENGAGED_INVALID )
	{
		SetState Exiting$;
	}
	else if( ( e$ == WE_DAMAGED ) || ( e$ == WE_ATTACKED_MELEE ) || ( e$ == WE_ATTACKED_RANGED ) )
	{
		TryRespondToAttack$( m_Go$, MakeGoid( msg$.Data1 ).Go );
	}
	else if( e$ == WE_ENEMY_SPOTTED )
	{
		TryRespondToAttack$( m_Go$, MakeGoid( msg$.Data1 ).Go );
	}
}


////////////////////////////////////////////////////////////////////
//	global response to messages for my guardee
event OnCCWorldMessage$( eWorldEvent e$, WorldMessage msg$ )
{
	if( ( e$ == WE_DAMAGED ) || ( e$ == WE_ATTACKED_MELEE ) || ( e$ == WE_ATTACKED_RANGED ) )
	{
		TryRespondToAttack$( m_Go$, MakeGoid( msg$.Data1 ).Go );
	}
	else if( e$ == WE_KILLED )
	{
		SetState( Exiting$ );
	}
	else if( e$ == WE_LOST_CONSCIOUSNESS )
	{
		SetState( Exiting$ );
	}
}


////////////////////////////////////////////////////////////////////////////////
//	
state RequestAction$
{
	transition
	{
		-> TargetMoved$:	OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );
		// We are switching to the fidget that is automatic upon arrival
		-> FidgetAgain$:	OnWorldMessage( WE_ANIM_DONE );
		-> FidgetAgain$:	OnWorldMessage( WE_MIND_PROCESSING_NEW_JOB );
		-> FidgetAgain$:	OnWorldMessage( WE_MCP_SECTION_COMPLETED );  
	}
	
	event OnWorldMessage$(  eWorldEvent e$, WorldMessage /*msg$*/ )
	{
		if( e$ == WE_MCP_SECTION_COMPLETE_WARNING )
		{
			float dist$ = m_Mind$.GetDistanceAtPlanEnd( m_Target$.Go );  
			if( ( dist$ > m_FollowDistance$ ) && ( m_Mind$.GetDistance( m_Target$.Go ) > m_ApproachDistance$ ) )	
			{
				setstate RequestAction$;	
			}
		}
	}
	
	event OnEnterState$
	{
		// verify our values!
		if (!m_Target$.IsValidMp() )
		{
			SetState Exiting$;
			return;
		}
		if ( !m_Job$.GoalObject.IsValidMp() )
		{
			SetState Exiting$;
			return;
		}

   		m_Job$.SetTimer( m_Mind$.SensorScanPeriod );
		eReqRetCode ret$;

		if( m_Target$.Go.Player.Controller == PC_COMPUTER )
		{
			// monsters use different follow parameters.
			m_FollowDistance$		= 3.5;
			m_ApproachDistance$		= 2.0;
			ret$ = MCPManager.MakeRequest(
										m_Go$.Goid,
										PL_APPROACH, 
										m_Target$,
										m_LookAhead$, m_MaxApproachTime$,
										m_ApproachDistance$ ) ;
		}
		else // if we are guarding a player use the more advanced spacing code.
		{
			m_Mind$.TempGopColl1.Clear;
			m_Target$.Go.Mind.GetEngagedMe( m_Mind$.TempGopColl1 );
			
			int slot$ = -1;
			int i$ = 0;
			int iend$ = m_Mind$.TempGopColl1.size;
			Go firstFollow$;
			
			while( i$ < iend$ )
			{
				Go temp$ = m_Mind$.TempGopColl1.Get( i$ );
				
				if( m_Target$.Go.Mind.IsFriend( temp$ ) )
				{
					slot$ += 1;
					if( slot$ == 0 )
					{
						firstFollow$ = temp$;
					}
				}
				
				if( temp$.goid == m_Go$.goid )
				{
					i$ = iend$;	
				} 
				i$ += 1;
			}
			
			if( firstFollow$ == null )
			{
				report.errorf("Can't find following characters.\n");
				return;	
			}
			
			report.genericf("slot: %d\n", slot$ );
			
			m_ApproachDistance$ = 1.4;
			m_FollowDistance$ = 1.55;
			float min_angle$ = 0.0;
			float max_angle$ = 0.0;
			
			
			if( slot$ > 6 )
			{
				m_ApproachDistance$ = 3.0;
				m_FollowDistance$ = 3.15;
			}
			else if( slot$ > 2 )
			{
				m_ApproachDistance$ = 2.1;
				m_FollowDistance$ = 2.25;
			}
			else if( slot$ != 0 )
			{
				m_ApproachDistance$ = 0.8;
				m_FollowDistance$ = 0.95;
			}
			
			if( ( slot$ == 2 ) || ( slot$ == 6 ) || ( slot$ == 10 ) || ( slot$ == 1 ) || ( slot$ == 5 ) || ( slot$ == 11 ) )
			{
				min_angle$ = 46;
				max_angle$ = 48;
			}
			else if( ( slot$ == 4 ) || ( slot$ == 8 ) || ( slot$ == 3 ) || ( slot$ == 9 ) )
			{
				min_angle$ = 20;
				max_angle$ = 22;	
			}
			
			if( ( slot$ == 1 ) || ( slot$ == 3 ) || ( slot$ == 5 ) || ( slot$ == 7 ) || ( slot$ == 9 ) || ( slot$ == 11 ) )
			{
				float temp$ = min_angle$;
				min_angle$ = -1.0 * max_angle$;
				max_angle$ = -1.0 * temp$;
			}
			
	//		report.genericf(
			
			if( AIQuery.FindSpotRelativeToSource(	m_Target$.Go,
													firstFollow$,
													false,
													m_ApproachDistance$,
													m_FollowDistance$,
													min_angle$,
													max_angle$,
													3.0,
													m_Mind$.TempPos1,
													false,
													false) )
			{
				ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_Mind$.TempPos1, 0.2 );
			}
			else
			{
				ret$ = MCPManager.MakeRequest(	m_Go$.Goid,
												PL_APPROACH, 
												m_Target$,
												m_LookAhead$, m_MaxApproachTime$,
												m_ApproachDistance$ ) ;
			}
		}

		report.ReportF("aimove","[%s] GUARD (PL_APPROACH) [%s] returned [%s]\n",
				m_Go$.TemplateName,
				m_Job$.GoalObject.GetGo.TemplateName,//	 MakeSiegePosString(m_Job$.GoalPosition),
				 ToString(ret$) );
				 
		if( RequestFailed(ret$) )
		{
			Report.Genericf("[%s] GUARD - FAILED could not get to target [%s]. Continuing job, Will try to path again.\n",
				m_Go$.TemplateName, m_Job$.GoalObject.GetGo.TemplateName);
			SetState( FidgetOnce$ );
		}
		else if (ret$ == REQUEST_OK_IN_RANGE)
		{
			SetState( Arrived$ );
		}
		else if ( (ret$ == REQUEST_OK) || (ret$ == REQUEST_OK_CROWDED) )
		{
			// just stay in this state we are going to make it to our goal in this move.
		}
		else // anything else we just want to try to get closer.
		{
			SetState( MovingCloser$ );
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	
state Arrived$
{

	transition

	{
		-> FidgetAgain$:	OnWorldMessage( WE_ANIM_DONE );
		-> FidgetAgain$:	OnWorldMessage( WE_MIND_PROCESSING_NEW_JOB );
	}

	trigger OnTimer$( 1 )
	{
		if (!m_Target$.IsValidMp() )
		{
			SetState Exiting$;
			return;
		}
		if( ( m_Mind$.GetDistanceAtPlanEnd( m_Target$.Go ) > m_FollowDistance$ ) && ( m_Mind$.GetDistance( m_Target$.Go ) > m_ApproachDistance$ ) )
		{
			SetState RequestAction$;
		}
		else if( ( Math.Abs( m_Mind$.GetDistanceAtPlanEnd( m_Target$.Go ) - m_Mind$.GetDistance( m_Target$.Go ) ) < 0.2 ) && ( m_Mind$.GetDistance( m_Target$.Go ) > m_ApproachDistance$ ) )
		{
			SetState RequestAction$;
		}
		else
		{
			SetState Arrived$;
		}
	}

	event OnEnterState$
	{
		StartFidgetIfRequired$();	
		this.CreateTimer( 1, 1 );
	
		// verify our values!
		if (!m_Target$.IsValidMp() )
		{
			SetState Exiting$;
			return;
		}
		if ( !m_Job$.GoalObject.IsValidMp() )
		{
			SetState Exiting$;
			return;
		}

		float dist$ = m_Mind$.GetDistanceAtPlanEnd( m_Target$.Go );
/*
		report.genericf( "from %s job %s scid:0x%08x, to %s job %s scid:0x%08x - distance at plan end = %f\n", 
							m_Go$.TemplateName, 
							( m_Go$.Mind.GetFrontJob( JQ_ACTION ) != NULL ) ? ToString( m_Go$.Mind.GetFrontJob( JQ_ACTION ).JobAbstractType ) : "none",
							m_Go$.Scid,
							m_Target$.Go.TemplateName, 
							( m_Target$.Go.Mind.GetFrontJob( JQ_ACTION ) != NULL ) ? ToString( m_Target$.Go.Mind.GetFrontJob( JQ_ACTION ).JobAbstractType ) : "none",
							m_Target$.Scid,
							dist$ );
*/
		Go client$ = m_Target$.Go;

		
		if( client$.Mind.OnEnemySpottedAttack && client$.Mind.AliveEnemiesVisible )
		{
			
			report.reportf( "aiskrit", "%s Guard: Trying to attack client's enemies.\n", m_go$.templatename );
			
			////////////////////////////////////////
			//	attack client's enemies first
			Go enemy$ = client$.Mind.GetBestFocusEnemy();
			
			if( enemy$ == NULL )
			{
				enemy$ = m_Mind$.GetBestFocusEnemy();
			}
			
			if( enemy$ != NULL )
			{
				if( TryRespondToAttack$( m_Go$, enemy$ ) )
				{
					return;
				}
			}
		}
		
		if ( !client$.Mind.IsLifeHigh )
		{
			report.reportf( "aiskrit", "%s Guard: Trying to heal client.\n", m_go$.templatename );
			
			////////////////////////////////////////
			//	heal client if needed and possible

			Go spellBook$ = m_Go$.Inventory.GetEquipped( ES_SPELLBOOK );
			if( spellBook$ != NULL )
			{
				//report.generic( "trying to heal guardee.\n" );

				////////////////////////////////////////
				//	find the most healing spell this guy can cast
				m_Mind$.TempQtColl1.Clear;
				m_Mind$.TempQtColl1.Add( QT_SPELL );
				m_Mind$.TempQtColl1.Add( QT_CASTABLE );
				m_Mind$.TempQtColl1.Add( QT_LIFE_HEALING );

				m_Mind$.TempGopColl1.Clear;
				spellBook$.Inventory.ListItems( IL_SPELL_1, m_Mind$.TempGopColl1 );
				spellBook$.Inventory.ListItems( IL_SPELL_2, m_Mind$.TempGopColl1 );

				m_Mind$.TempGopColl2.Clear;
				AIQuery.Get( m_Go$, m_Mind$.TempQtColl1, m_Mind$.TempGopColl1, m_Mind$.TempGopColl2 );
				Go spell$ = AIQuery.GetMax( m_Go$, QT_LIFE_HEALING, m_Mind$.TempGopColl2 );

				////////////////////////////////////////
				//	compare spell and log if best one thus far
				if( spell$ != NULL )
				{
					m_Mind$.SDoJob( MakeJobReq( JAT_CAST, JQ_ACTION, QP_FRONT, AO_REFLEX, m_Target$, spell$.Goid ) );
					return;
				}
			}
		}
		
		if( ( m_Mind$.OnEnemySpottedAttack && m_Mind$.AliveEnemiesVisible ) && ( m_Mind$.GetDistance( m_Target$.Go ) < m_Mind$.SightRange ) )
		{
			report.reportf( "aiskrit", "%s Guard: Trying to attack own enemies.\n", m_go$.templatename );
			
			////////////////////////////////////////
			//	attack own enemies last
			Go enemy$ = m_Mind$.GetBestFocusEnemy();
			if( TryAutoAttack$( m_Go$, enemy$ ) )
			{
				return;
			}
		}
		
		if( ( dist$ > m_FollowDistance$ ) && ( m_Mind$.GetDistance( m_Target$.Go ) > m_ApproachDistance$ ) )
		{
			report.reportf( "aiskrit", "%s Guard: Trying to move closer to client.\n", m_go$.templatename );
			
			////////////////////////////////////////
			//	try to stay close to client
			
			this.SetNewTimerSeconds( 1, .1 );
			return;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	
state FidgetAgain$
{
	event OnEnterState$
	{
		StartFidgetIfRequired$();
		SetState Arrived$;
	}
}

state FidgetOnce$
{
	transition
	{
		-> RequestAction$:	OnWorldMessage( WE_ANIM_DONE );
	}

	trigger OnTimer$( 1 )
	{
		SetState Arrived$;
	}

	event OnEnterState$
	{
		InterruptAndStartFidget$();	
		this.CreateTimer( 1, 2 );
	}
}

////////////////////////////////////////////////////////////////////////////////
//	
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}
