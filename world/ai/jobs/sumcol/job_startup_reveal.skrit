/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_startup_reveal.skrit

	Author(s)	: 	Eric Tams

	Purpose		:	Generic revealing start-up job

	(C)opyright 2001 Gas Powered Games, Inc.


	Exptected Behavior:
	-------------------

		This job will reveal the character then exit
  ----------------------------------------------------------------------------
  ============================================================================
*/


Go		m_Go$;
GoMind	m_Mind$;
Job		m_Job$;
Goid	Attacker$;

#include "k_job_c_attack_utils"

startup state STARTUP$
{
}

property	bool	auto_reveal$	= false		doc = "automaticaly start to reveal.";
property	bool	invisible$		= false		doc = "make this actor invisible before revealing.";
property	float	vis_delay$		= 0.0		doc = "if invisible how long to wait before making the actor visible.";
property	bool 	try_face$		= true		doc = "Try to face closest enemy when revealing.";
property	bool	construct_anim$	= false		doc = "Look at the stance of the revealing monster and construct an animation"; 

////////////////////////////////////////////////////////////////////////////////
//	init

event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
}

event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );
	
	SetState Start$;
}

////////////////////////////////////////////////////////////////////////////////
//	helper functions

////////////////////////////////////////
//	TryAnim

bool TryAnim$( int FourCC$ )
{
	MCPManager.Flush( m_Go$.Goid );
					
	int Anim$ = m_Go$.Aspect.AspectHandle.Blender.GetSubAnimIndex(CHORE_MISC,FourCC$);
		
	if (Anim$ >= 0)
	{
		eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_PLAYANIM, CHORE_MISC, Anim$, 0 );
		return true;	
	}
	return false;
}

bool Reveal$
{
	int Anim$;
	if( construct_anim$ )
	{
		Anim$ = 'wak0';
		int stance$ = m_Go$.Inventory.GetAnimStanceInt();
		if ( stance$ < 0 )
		{
			stance$ = 0;
		}
		Anim$ += stance$;
	}
	else
	{
		Anim$ = 'wake';
	}
	
	return( TryAnim$( Anim$ ) );
}

bool Sleep$
{
	int Anim$;
	if( construct_anim$ )
	{
		Anim$ = 'slp0';
		int stance$ = m_Go$.Inventory.GetAnimStanceInt();
		if ( stance$ < 0 )
		{
			stance$ = 0;
		}
		Anim$ += stance$;
	}
	else
	{
		Anim$ = 'slep';
	}
	
	return( TryAnim$( Anim$ ) );
}

////////////////////////////////////////////////////////////////////////////////
//	main state machine

////////////////////////////////////////////////////////////////////////////////
//	state Start$
//
//  On entering the start state The brain checks to see if a Sleeping Animation exists.
//  If the character has a sleeping animation it will play it until an enemy is spotted.

state Start$
{
	event OnEnterState$
	{	
		if ( Sleep$ ) 
		{
			if( invisible$ )
			{
				m_Go$.Aspect.AspectHandle.SetHideMeshFlag( true );
				m_Go$.Aspect.SSetIsVisible( false );
			}
			
			SetState Sleeping$;
		} 
		else 
		{
			SetState Exiting$;
		}
	}
}

State Sleeping$
{
	event OnWorldMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_ENEMY_SPOTTED )
		{
			Attacker$ = MakeGoid( msg$.Data1 );
			SetState Wakeup$;
		}
		if( e$ == WE_DAMAGED )
		{
			Attacker$ = MakeGoid( msg$.Data1 );
			SetState Wakeup$;
		}

		if( e$ == WE_ANIM_DONE )
		{
			if( auto_reveal$ )
			{
				SetState Wakeup$;
				return;
			}
			
			if( !invisible$ )
			{
				SetState Sleeping$;
			}	
		}
	}
	
	event OnEnterState$
	{	
		if( !invisible$ )
		{
			if ( !Sleep$ )
			{
				SetState Exiting$;
			}
		}
	}
	
	event OnExitState$
	{	
		if( invisible$ )
		{
			m_Go$.Aspect.SSetIsVisible(true);
			This.CreateTimer( 1, vis_delay$ );
			This.SetTimerGlobal( 1, true );
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	state Wakeup$
//
//  When entering this stats the Brain tries to play the wakeup animation.
//  When it is finished auto fidgeting is turned on and the brain enters the main state machine.

state Wakeup$
{
	bool revealed$ = false;
	
	trigger OnTimer$( 1 )
	{
		This.CreateTimer( 3, 0 );
		if ( !Reveal$ )
		{
			SetState Exiting$;
		}	
	}
	
	trigger OnTimer$( 3 )
	{
		revealed$ = true;
	}
	
	event OnEnterState$
	{
		if( try_face$ )
		{
			m_Mind$.TempQtColl1.Clear;
			m_Mind$.TempQtColl1.Add( QT_ENEMY  );
			m_Mind$.TempQtColl1.Add( QT_ALIVE_CONSCIOUS );
	    	
			Go temp_enemy$ = m_Mind$.GetClosestVisible( m_Mind$.TempQtColl1 );
	    	
			if (temp_enemy$ != NULL)
			{
				if( !m_Mind$.AmFacing( temp_enemy$ ) )
				{
					MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, temp_enemy$.goid );
				}
			}
		}

		if( !invisible$ )
		{
			This.CreateTimer( 3, 0 );
			if ( !Reveal$ )
			{
				SetState Exiting$;
			}
		}
	}
	
	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
		if( revealed$ )
		{
			SetState Exiting$;
		}
		else
		{
			if ( !Reveal$ )
			{
				SetState Exiting$;
			}
		}
	}
	
	event OnExitState$
	{
		if( try_face$ )
		{
			MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );
		}

		m_Mind$.ReqResetSensorsSelfAndVisible();
	}	
}

////////////////////////////////////////////////////////////////////////////////
//	
state Exiting$
{
	event OnEnterState$
	{
		m_Mind$.SetActorAutoFidgets( true );
		m_Go$.Aspect.SSetIsVisible( true );
		
		if( Attacker$.IsValid() )
		{
			TryRespondToAttack$( m_Go$, Attacker$.Go );
		}                                                                     
                                                                              
    	m_Job$.MarkForDeletion();
	}
}