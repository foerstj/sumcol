property string effect_script$		= ""	doc = "Name of the SiegeFx script that will be providing the visual.";
property string end_script$			= ""	doc = "Name of the SiegeFx script that will be providing the visual when un_summoning.";
property string script_params$		= ""	doc = "Parameters to send to SiegeFx script";
property string template_name$		= ""	doc = "Template name of actor to summon";
property string state_name$			= "summoned"			doc = "Name of effect to use as a generic state and as a screen name.";
property string description$		= ""	doc = "Description of enchantment being applied";
property string caster_description$	= ""	doc = "Description of enchantment being applied to the caster";
property bool	guard_caster$		= true	doc = "Make the summoned creature follow the caster.";
property bool	change_align$		= true	doc = "set summon alignment to be that of the caster.";
property bool	delete_inv$			= true	doc = "delete summons inventory when removed.";

property float	statsMultiplier$ = 1.0						doc = "Fraction of stats of copied creature.";
property string	dop_effect_script$ = "doppelganger_glow"	doc = "Effect to play on the doppelganger while it's copied";



owner = GoSkritComponent;  // the spell object
#include "k_inc_spl_utils"

Goid caster$;  // your mage char
Goid cast_target$;  // probably like a dummy point object created where you right-click?
int starting_pos$;  // starting pos of the summon (SiegeFX var ref)
float summon_duration$;  // how long the summon will live
Goid summoned_goid$;  // Goid of the summoned creature (first the initial, then the doppeled one)
Goid doppel_target$;  // Goid of the enemy that gets doppeled
Goid newMe$;  // Goid of the doppeled creature
Goid oldMe$;  // Goid of the initial creature
bool isDoppeled$ = false;


// can we copy target$?  is it a good target?
bool IsValidDoppelgangerTarget$( Go target$ )
{
	// exclusions from original Doppelganger
	if( target$.Actor.HasGenericState("summoned") ||
		target$.Actor.HasGenericState("DSX_mezmerizing") ||
		target$.Actor.HasGenericState("invisibility_self") ||
		target$.Inventory.IsPackOnly)
	{
		return false;
	}

	// additional exclusions for the summon
	// these should exclude bosses & minibosses
	if( target$.Common.Membership.contains("immune_charm") ||
		target$.Common.Membership.contains("immune_control") ||
		target$.Common.Membership.contains("immune_polymorph") ||
		target$.Common.Membership.contains("immune_align_change"))
	{
		return false;
	}
	// prevent doppel inception when meeting doppelganger enemies
	if( target$.hasComponent("doppelganger") )
	{
		return false;
	}

	return true;
}

// JCD 9/3/03
// delete all the items in the inventory of the target_go
void DeleteInventory$( go target_go$ )
{
	// do we have an inventory
	if(!target_go$.HasInventory())
	{
		return;
	}

	// clear a collection to use
	target_go$.Mind.TempGopColl1.Clear();

	// get everything in the inventory
	target_go$.Inventory.ListItems(IL_ALL, target_go$.Mind.TempGopColl1);

	// get set to loop
	int i$ = 0;
	int iend$ = target_go$.Mind.TempGopColl1.Size();
	Go temp$;

	// loop through and search for items that have inventories.  then delete the item
	while( i$ < iend$ )
	{
		// get the go
		temp$ = target_go$.Mind.TempGopColl1.Get( i$ );

		// do we have an inventory?  if yes, go one level deeper.  i hope no one
		// is planning on going farther than that...
		if( temp$.HasInventory() )
		{
			// get all the items in this inventory
			target_go$.Mind.TempGopColl2.Clear();
			temp$.Inventory.ListItems(IL_ALL, target_go$.Mind.TempGopColl2);

			// loop and delete
			int j$ = 0;
			int jend$ = target_go$.Mind.TempGopColl2.Size();
			Go temp2$;

			while(j$ < jend$)
			{
				temp2$ = target_go$.Mind.TempGopColl2.Get( j$ );

				// remove it from the inventory
				temp$.Inventory.RSRemove(temp2$, false);
				// delete it
				PostWorldMessage(WE_REQ_DELETE, owner.Goid, temp2$.Goid, 0);

				j$ = j$ + 1;
			}
		}

		// delete the item itself
		target_go$.Inventory.RSRemove(temp$, false);
		PostWorldMessage(WE_REQ_DELETE, owner.Goid, temp$.Goid, 0);

		i$ = i$ + 1;
	}
}

// JCD 9/3/03
// copy inventory of from_go to to_go.
// if copy all is set, we are copying from the old doppelganger body to the new one
// when this happens, everything copied is pcontent.
void CopyInventory$( go from_go$, go to_go$ )
{
	// both actors must have an inventory.
	if( !from_go$.HasInventory() || !to_go$.HasInventory() )
	{
		return;
	}

	// clear a collection to use
	from_go$.Mind.TempGopColl1.Clear();

	// get everything in the inventory
	from_go$.Inventory.ListItems(IL_ALL, from_go$.Mind.TempGopColl1);

	// get set to loop
	int i$ = 0;
	int iend$ = from_go$.Mind.TempGopColl1.Size();
	Go temp$;
	eInventoryLocation location$;
	eEquipSlot slot$;

	// loop through and copy all items from one to another
	while( i$ < iend$ )
	{
		// get the item
		temp$ = from_go$.Mind.TempGopColl1.Get( i$ );

		// get its inventory location
		location$ = from_go$.inventory.GetLocation(temp$);

		// get its equip slot
		slot$ = from_go$.inventory.GetEquippedSlot(temp$);

		// if it is an item sitting in the targets inventory unused, we dont want it
		if( location$ == IL_MAIN && slot$ == ES_NONE )
		{
			// report.genericf("non useful item found and NOT copied\n");
			i$ = i$ + 1;
			continue;
		}

		// if the location is not the selected location, we don't want to put it there.
		if( location$ != from_go$.inventory.GetSelectedLocation() )
		{
			location$ = IL_MAIN;
		}

		// clone the item
		GoCloneReq cloneReq$ = MakeGoCloneReq( temp$.GetTemplateName );
		cloneReq$.StartingPos = owner.Go.Placement.Position;
		Goid newItem$ = GoDb.SCloneGo( cloneReq$ );

		// give the doppelganger the new item in the same location
		to_go$.Inventory.RSAdd(newItem$.go, location$, AO_REFLEX, false);

		// do we have an inventory?  if yes, go one level deeper.  i hope no one
		// is planning on going farther than that...
		if( temp$.HasInventory() )
		{
			// get all the items in this inventory
			to_go$.Mind.TempGopColl2.Clear();
			temp$.Inventory.ListItems(IL_ALL, to_go$.Mind.TempGopColl2);

			// loop and copy
			int j$ = 0;
			int jend$ = to_go$.Mind.TempGopColl2.Size();
			Go temp2$;
			eInventoryLocation location2$;

			while(j$ < jend$)
			{
				temp2$ = to_go$.Mind.TempGopColl2.Get( j$ );
				location2$ = temp$.inventory.GetLocation(temp2$);

				// clone the item
				GoCloneReq cloneReq2$ = MakeGoCloneReq( temp2$.GetTemplateName );
				Goid newItem2$ = GoDb.SCloneGo( cloneReq2$ );

				// give the doppelganger the new item in the same location
				newItem$.Go.Inventory.RSAdd(newItem2$.go, location2$, AO_REFLEX, false);

				j$ = j$ + 1;
			}
		}

		// only equip if the slot is specific.
		if( slot$ != ES_NONE )
		{
			to_go$.Inventory.RSEquip(slot$, newItem$, AO_REFLEX);
		}
		if( slot$ == ES_SPELLBOOK )
		{
			to_go$.Inventory.setActiveSpellbook( newItem$.Go );
		}

		i$ = i$ + 1;
	}
}

Goid GetPartyMemberInRange$( goid temptarget$, float range$ )
{
	// get the bad guys party
	Go EnemyParty$;
	// JCD 8/12/03
	// if temptarget is a summon, we need to get its owner's party instead
	if( temptarget$.go.Actor.HasGenericState("summoned") )
	{
		#only( game )
		[[
		EnemyParty$ = temptarget$.go.actor.GetGenericStateCasterGoid("summoned").go.GetPlayer().GetParty();
		]]
	}
	else if( temptarget$.go.actor.HasGenericState("DSX_mezmerizing") )
	{
		#only( game )
		[[
		EnemyParty$ = temptarget$.go.actor.GetGenericStateCasterGoid("DSX_mezmerizing").go.GetPlayer().GetParty();
		]]	
	}
	else
	{
		#only( game )
		[[
		EnemyParty$ = temptarget$.go.GetPlayer().GetParty();
		]]
	}
	if( EnemyParty$ != NULL )
	{
		AIQuery.TempGopColl1.clear;

		int i$ = 0;
		int iend$ = EnemyParty$.children.size;
		// report.genericf("Doppelganger: enemy party size: %d\n",iend$ );
		while( i$ < iend$ )
		{
			// report.genericf("Doppleganger: searching for enemy within range\n");
			Go member$ = EnemyParty$.children.Get( i$ );
			// add all of the party members in range to the list.

			// JCD 8/4/03
			// don't allow dopps to copy summoned creatures nor spectral images
			// nor pack animals
			if( IsValidDoppelgangerTarget$( member$ ) &&
				IsAlive( member$.Aspect.Lifestate ) &&
				AIQuery.GetDistance( member$.Placement.Position, owner.Go.Placement.Position ) < ( range$ ) )
			{
				// report.genericf("Doppleganger: attackable enemy found\n");
				AIQuery.TempGopColl1.Add( member$ );
			}

			i$ += 1;
		}
		
		if( AIQuery.TempGopColl1.size() > 0 )
		{
			Go temp$ = AIQuery.TempGopColl1.Get( Math.RandomInt( AIQuery.TempGopColl1.size() - 1 ) );

			if( temp$ != NULL )
			{
				return temp$.goid;
			}
		}
	}
	return temptarget$;
}


trigger OnGoPreload$
{
	if( template_name$ != "")
	{
		GoDb.PreloadCloneSource( owner.Go, template_name$ );
	}
}

// global cleanup timer
trigger OnTimer$( 2 )
{
	SetState CleanUp$;
}

void doPlayUnsummonEffect$( eWorldEvent e$)
{
	// Running the effect not on the summon, but on a new point.
	// This way it also works when the summon explodes on killed.

	// Make an effect point.
	GoCloneReq cloneReq$ = MakeGoCloneReq( "point" );
	// MRC 7/8/2003 Bug 1412 Need to make sure the point is available on all clients.
	cloneReq$.SetForceServerOnly(false);
	cloneReq$.SetForceClientAllowed(true);
	cloneReq$.StartingPos = summoned_goid$.Go.Placement.Position;
	Goid point$ = GoDb.SCloneGo( cloneReq$ );

	SiegeFx.SRunScript( end_script$, point$, point$, script_params$, point$, e$ );
}
void playUnsummonEffect$( eWorldEvent e$ )
{
	if( summoned_goid$.IsValidMp)
	{
		if ( end_script$ != "" )
		{
			doPlayUnsummonEffect$( e$ );
		}
	}
}

// cleanup if the summon is killed
void onSummonedKilled$()
{
	// play unsummon effect
	playUnsummonEffect$( WE_KILLED );
	
	DeleteInventory$( summoned_goid$.Go );

	this.CreateTimer( 2, .1 );  // global cleanup timer
}
void onSummonDamaged$()
{
	if( isDoppeled$ && summoned_goid$.Go.Aspect.GetCurrentLife < 1.0 )
	{
		DeleteInventory$( summoned_goid$.Go );
	}
}
event OnGoHandleCcMessage$( eWorldEvent e$, WorldMessage msg$ )
{
	if( ( e$ == WE_KILLED ) && ( summoned_goid$ == msg$.GetSendTo() ) )
	{
		onSummonedKilled$();
	}
	if( ( e$ == WE_DAMAGED ) && ( summoned_goid$ == msg$.GetSendTo() ) )
	{
		onSummonDamaged$();
	}
}

// disable the summon during NIS
void onEnterNIS$()
{
	if( !summoned_goid$.IsValid )
	{
		return;
	}

	Go Summon$ = summoned_goid$.Go;
	Summon$.Mind.SetMayAttack( false );
	Summon$.Mind.SetMayBeAttacked( false );
	Summon$.Mind.SDoJob( MakeJobReq( JAT_STOP, JQ_ACTION, QP_CLEAR, AO_COMMAND ));

	Summon$.Mind.TempGopColl1.clear;
	Summon$.Mind.GetEngagedMeEnemies( Summon$.Mind.TempGopColl1 );

	int j$ = 0;
	int jend$ = Summon$.Mind.TempGopColl1.Size();

	Go Enemy$;

	while( j$ < jend$ )
	{
		Enemy$ = Summon$.Mind.TempGopColl1.Get( j$ );
		if( Enemy$ != NULL )
		{
			Enemy$.Mind.SDoJob( MakeJobReq( JAT_STOP, JQ_ACTION, QP_CLEAR, AO_COMMAND ));
			Enemy$.Mind.ResetSensors();

		}
		j$ += 1;
	}
}
void onLeaveNIS$()
{
	if( !summoned_goid$.IsValid )
	{
		return;
	}

	summoned_goid$.Go.Mind.SetMayAttack( true );
	summoned_goid$.Go.Mind.SetMayBeAttacked( true );
}
trigger OnGoHandleMessage$( WE_WORLD_STATE_TRANSITION_DONE )
{
	if( WorldState.CurrentState == WS_SP_NIS )
	{
		onEnterNIS$();
	}
	else
	{
		onLeaveNIS$();
	}
}

startup state CastBegin$
{
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_REQ_CAST ) 
		{
			////////////////////
			// Normal Go

			caster$ = msg$.GetSendFrom();
			cast_target$ = MakeGoid( msg$.GetData1() );

			if( !cast_target$.IsValidMp || !caster$.IsValidMp )
			{
				SetState Abort$;
				return;
			}

			if( caster$.Go.Actor.HasGenericState( owner.Go.Magic.CasterStateName ) )
			{
				SetState Abort$;
				return;
			}

			// Copy the reference to the starting position into SiegeFx persistant storage
			starting_pos$ = SiegeFx.AddVariable( cast_target$.go.placement.position, owner.goid );

			// Start the visual effect
			SiegeFx.SRunScript( effect_script$, cast_target$, caster$, script_params$, owner.Goid, WE_REQ_CAST );

			summon_duration$ = owner.Go.Magic.EvaluateEffectDuration(caster$.Go, caster$.Go);
			caster$.Go.Actor.SAddGenericState( owner.Go.Magic.CasterStateName, caster_description$, summon_duration$ + 2.0, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
		}
		else if ( e$ == WE_SPELL_SYNC_MID )
		{
			////////////////////
			// Normal Go

			SetState SummonGo$;
		}
		else if ( e$ == WE_REQ_ACTIVATE )
		{
			////////////////////
			// Omni Go
			
			caster$ = msg$.GetSendFrom();
			summoned_goid$ = MakeGoid( msg$.GetData1() );
			
			if( !summoned_goid$.IsValid || !caster$.Isvalid )
			{
				SetState CleanUp$;
				return;
			}

			if( !summoned_goid$.go.hasactor )
			{
				SetState CleanUp$;
				return;
			}

			summon_duration$ = owner.Go.Magic.EvaluateEffectDuration(summoned_goid$.Go, caster$.Go);

			// buff the summoned guy up.
			owner.go.magic.SApplyEnchantments( summoned_goid$, caster$ );

			summoned_goid$.Go.Aspect.IsInvincible = false;

			this.CreateTimer( 1, 0 );  // -> ControlSummoned$
		}
	}

	transition -> ControlSummoned$ : OnTimer( 1 );
}

state SummonGo$
{
	////////////////////
	// Normal Go

	event OnEnterState$
	{
		if( Owner.go.Parent != NULL )
		{
			// First create the go
			GoCloneReq cloneReq$ = MakeGoCloneReq( template_name$ );
			cloneReq$.StartingPos = SiegeFx.GetVariable( starting_pos$, owner.goid );
			cloneReq$.SnapToTerrain = true;
			cloneReq$.Fadein = true;
			summoned_goid$ = GoDb.SCloneGo( cloneReq$ );

			if( change_align$ && caster$.IsValid )
			{
				summoned_goid$.Go.actor.ssetalignment( caster$.Go.actor.alignment );
				summoned_goid$.Go.SsetPlayer( caster$.Go.PlayerID );
			}
			summoned_goid$.Go.Aspect.IsInvincible = true;

			// create Omni version of the spell.
			cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );
			cloneReq$.Omni = true;
			Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );

			// send Omni version an Activate to get it started.
			PostWorldMessage( WE_REQ_ACTIVATE, caster$, new_spell$, MakeInt( summoned_goid$ ), 0 );
		}

		// delete normal version of the spell.
		SetState Finished$;
	}
}


void onEndSpell$()
{
	playUnsummonEffect$( WE_DAMAGED );

	this.CreateTimer( 2, .1 );  // global cleanup timer
}
void remindGuarding$()
{
	if( summoned_goid$.isvalid && caster$.IsValid() )
	{
		if( summoned_goid$.Go.Mind.UnderstandsJob( JAT_GUARD ) )
		{
			if( summoned_goid$.Go.Mind.CanOperateOn( owner.go.parent ) )
			{
				Job action$ = summoned_goid$.Go.Mind.GetFrontJob( JQ_ACTION );

				if( action$ != NULL )
				{
					if( action$.JobAbstractType != JAT_FIDGET )
					{
						return;
					}
				}
				summoned_goid$.go.Mind.SDoJob( MakeJobReq( JAT_GUARD, JQ_ACTION, QP_FRONT, AO_COMMAND, owner.go.parent.Goid ) );
			}
		}
	}
}
bool findDoppelTarget$()
{
	// We're going to clone our target enemy and then remove ourself
	// Find who we're attacking
	Job action$ = summoned_goid$.Go.Mind.GetFrontJob( JQ_ACTION );

	Goid target$ = NULL;

	// JCD 8/12/03
	// if the target is valid, just choose that
	if ( action$!=NULL )
	{
		if( action$.IsOffensive )
		{
			if( action$.GoalObject.go.HasActor )
			{
				if( IsValidDoppelgangerTarget$(action$.GoalObject.go) )
				{
					// report.genericf("Doppelganger: we have a suitable target");
					target$ = action$.GoalObject;
				}
			}
			// we can't do much if our target doesn't have an actor...
			else
			{
				return false;
			}
		}
	}
	// otherwise we need to look for someone else to clone.
	if( target$ == NULL )
	{
		// JCD 8/12/03
		// if we have an enemy near us, we can set it as our target
		if( summoned_goid$.Go.Mind.GetBestFocusEnemy()!=NULL )
		{
			// find the closest enemy
			target$ = summoned_goid$.Go.Mind.GetBestFocusEnemy().Goid;
		}
		// if we have none near us, we can't do anything.
		else
		{
			return false;
		}

		// see if we can get a better target.
		// see if we should choose a party member.
		if( target$.IsValid )
		{
			target$ = GetPartyMemberInRange$( target$, summoned_goid$.Go.mind.sightrange * 1.5 );
		}
	}

	// JCD 8/4/03
	// we don't allow dopps to clone summoned creatures nor spectral images
	if( !IsValidDoppelgangerTarget$(target$.go) )
	{
		return false;
	}

	doppel_target$ = target$;
	return true;
}
state ControlSummoned$
{
	////////////////////
	// Omni Go

	trigger OnGoHandleMessage$( WE_SPELL_EXPIRATION_TIMER_RESET )
	{
		onEndSpell$();
	}

	// JCD 7/25/03
	// does the same as when WE_SPELL_EXPIRATION_TIMER_RESET is caught, but this allows us to
	// kill the spell in MP when the client presses the unsummon button without errors occurring.
	trigger OnGoHandleMessage$( WE_REQ_DEACTIVATE )
	{
		onEndSpell$();
	}

	trigger OnTimer$ ( 1 )
	{
		onEndSpell$();
	}

	event OnEnterState$
	{
		if( !summoned_goid$.isvalid )
		{
			SetState CleanUp$;
			return;
		}

		if( caster$.IsValid() )
		{
			summoned_goid$.Go.Actor.SRemoveGenericState( state_name$ );
			summoned_goid$.Go.Actor.SAddGenericState( state_name$, description$, summon_duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
			caster$.Go.Actor.SRemoveGenericState( owner.Go.Magic.CasterStateName );
			caster$.Go.Actor.SAddGenericState( owner.Go.Magic.CasterStateName, caster_description$, summon_duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );

			// we want to be able to see the dude's health
			summoned_goid$.Go.Actor.SSetCanShowHealth( true );

			// Make him have the same membership as the caster
			summoned_goid$.Go.Common.SCopyMembership( caster$ );
		}

		// Setup where experience will go from who this actor damages
		summoned_goid$.Go.aspect.SetExperienceBenefactor( caster$ );
		summoned_goid$.Go.aspect.SetExperienceBenefactorSkill( owner.go.magic.skillclass );

		// watch our pet, so if he dies we can control a new pet.
		GoDb.StartWatching( owner.Goid, summoned_goid$);

		this.CreateTimer( 1, summon_duration$ );  // end the spell after the duration times out

		if(guard_caster$)
		{
			JobReq req$;
			if( summoned_goid$.Go.Mind.UnderstandsJob( JAT_GUARD ) )
			{
				if( summoned_goid$.Go.Mind.CanOperateOn( owner.go.parent ) )
				{
					req$ = MakeJobReq( JAT_GUARD, JQ_ACTION, QP_FRONT, AO_COMMAND, owner.go.parent.Goid );
					summoned_goid$.go.Mind.SDoJob( req$ );
				}
			}

			this.CreateTimer( 3, 5 );  // start remind guarding
		}

		if (!isDoppeled$)
		{
			this.CreateTimer( 4, 1 );  // start looking for doppel target
		}

		this.CreateTimer( 5, 0 );  // start counting down
	}

	// remind the summon of guarding the caster once in a while
	trigger OnTimer$ ( 3 )
	{
		this.CreateTimer( 3, 5 );
		remindGuarding$();
	}

	// every second we poll our range for an enemy to dopp.
	trigger OnTimer$ ( 4 )
	{
		this.CreateTimer( 4, 1 );
		
		bool found$ = findDoppelTarget$();
		if( found$ )
		{
			SiegeFX.SRunScript( "doppelganager_switch", summoned_goid$, doppel_target$, "", doppel_target$, WE_REQ_ACTIVATE );
			SetState Switch$;
		}
	}

	// count down summon duration so we can re-apply it when switching
	trigger OnTimer$ ( 5 )
	{
		this.CreateTimer( 5, 1 );
		summon_duration$ = summon_duration$ - 1;
	}
}

state Switch$
{
	trigger OnGoHandleMessage$( WE_SPELL_EXPIRATION_TIMER_RESET )
	{
		onEndSpell$();
	}
	trigger OnGoHandleMessage$( WE_REQ_DEACTIVATE )
	{
		onEndSpell$();
	}

	change$ at ( 1.0 )
	{
		// report.genericf("Doppleganger: Changing.  My goid: 0x%x My scid: 0x%x\n", MakeInt(owner.goid), MakeInt(owner.scid));

		if( !doppel_target$.IsValid )
		{
			SetState ControlSummoned$;
			return;
		}
		if( !IsAlive( doppel_target$.Go.Aspect.Lifestate ) )
		{
			SetState ControlSummoned$;
			return;
		}

		// Report.Genericf("Doppelganger copying target %s\n", target$.Go.TemplateName);
		oldMe$ = summoned_goid$;

		// clone who we're attacking at my location - make the player be MY player, not the player
		//		of who I am attacking

		GoCloneReq cloneReq$ = MakeGoCloneReq( doppel_target$, oldMe$.Go.PlayerId);
		cloneReq$.StartingPos = oldMe$.Go.Placement.Position;
		cloneReq$.SnapToTerrain = true;
		#only( game )
		[[
		cloneReq$.SetCopyInventory(false);
		]]
		newMe$ = GoDb.SCloneGo( cloneReq$ );

		// make new me invisible until the next phase, and unable to attack
		newMe$.Go.Aspect.SSetIsVisible( false );
		newMe$.Go.Mind.SetMayAttack( false );
		newMe$.Go.Mind.SetMayBeAttacked( false );

		// make it aa_good & give it caster's membership - avoid early that enemies befriend it
		if( change_align$ && caster$.IsValid )
		{
			newMe$.Go.actor.ssetalignment( caster$.Go.actor.alignment );
			newMe$.Go.SsetPlayer( caster$.Go.PlayerID );
			newMe$.Go.Common.SCopyMembership( caster$ );
		}

		// prevent enemy doppelgangers from doppeling newMe - generic state "summoned" is one of the criteria in IsValidDoppelgangerTarget$
		newMe$.Go.Actor.SAddGenericState( state_name$, description$, -1, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );

		// TAT 9/29/2003 - because of timing issues, we want to be sure that the
		//	clone is created on all machines before setting it up
		//	so let's wait a moment
		this.CreateTimer(1, 0.5);
	}

	trigger OnTimer$(1)
	{
		if ( !newMe$.IsValid )
		{
			Report.Genericf("Doppelganger newMe is not valid\n");
		}

		// make new me visible and able to attack
		newMe$.Go.Aspect.SSetIsVisible( true );
		newMe$.Go.Mind.SetMayAttack( true );
		newMe$.Go.Mind.SetMayBeAttacked( true );

		// give the doppelganger a generic state so that we can check if it is a dopp later on
		newMe$.go.Actor.SAddGenericState("doppelganger", "Doppeled", -1, newMe$, newMe$, 0);

		// report.genericf("Doppleganger: Changing.  My goid: 0x%x My new goid: 0x%x\n", MakeInt(oldMe$), MakeInt(newMe$));

		// make it aa_good & give it caster's membership - do it again here in case of the mentioned "timing issues"
		if( change_align$ && caster$.IsValid )
		{
			newMe$.Go.actor.ssetalignment( caster$.Go.actor.alignment );
			newMe$.Go.SsetPlayer( caster$.Go.PlayerID );
			newMe$.Go.Common.SCopyMembership( caster$ );
		}

		#only( game )
		[[
		// copy the mind
		newMe$.Go.Mind.RSCopyMind( oldMe$.Go.Mind );

		// and skills
		newMe$.Go.Actor.RSCopySkills( oldMe$.Go.Actor, statsMultiplier$ );

		// set the screen name
		string screenName$;
		oldMe$.Go.Common.GetScreenName(screenName$);
		newMe$.Go.Common.SSetScreenName(screenName$);

		// set up the appropriate stats
		newMe$.Go.RSSetDoppelgangerStats( oldMe$.Go, statsMultiplier$ );
		]]

		// make sure it isn't invincible
		newMe$.Go.Aspect.SetIsInvincible( false );

		// Don't draw selection indicator
		newMe$.Go.Aspect.SetDrawSelectionIndicator( false );

		// JCD 9/3/03
		// we want to copy the targets current inventory, not original inventory from their template
		// first - run through dopps inventory, deleting everything we come to
		DeleteInventory$(newMe$.go);
		// second - give the dopp everything the target has
		CopyInventory$( doppel_target$.go, newMe$.go );

		// delete the inventory of the old body
		DeleteInventory$(oldMe$.go);

		// Select the same slot as the target
		// $$$ might want to change the slot. The target might be weilding a non-combat spell. -ET
		newMe$.Go.Inventory.RSSelect( doppel_target$.Go.Inventory.SelectedLocation, AO_REFLEX );

		// Get the radius of the new me to use to scale the effect.
		string params$ = "";
		StringTool.AppendF(params$, "[%g][%g]", doppel_target$.Go.GetAspect.GetBoundingSphereRadius() * .5, (doppel_target$.Go.GetAspect.GetBoundingSphereRadius() * .5) - .1);

		SiegeFX.SRunScript( dop_effect_script$, newMe$, newMe$, params$, newMe$, WE_REQ_ACTIVATE );

		// delete the initial creature
		GoDb.SMarkForDeletion( oldMe$.Go );


		// Now back to controlling the summoned creature...
		summoned_goid$ = newMe$;
		isDoppeled$ = true;
		SetState ControlSummoned$;
	}
}

state CleanUp$
{
	////////////////////
	// Omni Go
	
	transition -> FinishedOmni$: OnTimer( 1 );

	event OnEnterState$
	{
		if( caster$.IsValid )
		{
			caster$.Go.Actor.SRemoveGenericState( owner.Go.Magic.CasterStateName );
		}

		if( summoned_goid$.isvalid)
		{
			GoDb.StopWatching( owner.Goid, summoned_goid$);

			// MRC 8/4/2003 Bug 2269 If this is an effect creature (if it's being forced
			// not to render), then don't fade it.  Fading causes the model to be drawn
			// during the fade process, and we don't want that to happen for effect
			// creatures.
			if(summoned_goid$.Go.Aspect.GetForceNoRender())
			{
				if( delete_inv$ )
				{
					GoDb.SMarkGoAndChildrenForDeletion( summoned_goid$, true, false );
				}
				else
				{
					GoDb.SMarkForDeletion( summoned_goid$, true, false );
				}
			}
			// Otherwise, do the normal deletion with a fade.
			else
			{
				if( delete_inv$ )
				{
					GoDb.SMarkGoAndChildrenForDeletion( summoned_goid$, true, true );
				}
				else
				{
					GoDb.SMarkForDeletion( summoned_goid$, true, true );
				}
			}
		}

		this.CreateTimer( 1, 0 );  // -> FinishedOmni$
	}
}

state Finished$
{
	////////////////////
	// Normal Go

	event OnEnterState$
	{
		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}

state FinishedOmni$
{
	////////////////////
	// Omni Go

	event OnEnterState$
	{
		// Get rid of any temporary storage
		SiegeFx.ClearVariables( owner.goid );

		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}

state Abort$
{
	////////////////////
	// Normal Go

	event OnEnterState$
	{
		// Refund the players mana
		Rules.ChangeMana( caster$, owner.go.getmagic.manacost );

		// Get rid of any temporary storage
		SiegeFx.ClearVariables( owner.goid );

		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}
