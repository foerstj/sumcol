property string effect_script$		= ""	doc = "Name of the SiegeFx script that will be providing the visual.";
property string end_script$			= ""	doc = "Name of the SiegeFx script that will be providing the visual when un_summoning.";
property string script_params$		= ""   	doc = "Parameters to send to SiegeFx script";
property string state_name$			= "summoned"			doc = "Name of effect to use as a generic state and as a screen name.";
property string description$		= ""	doc = "Description of enchantment being applied";
property string caster_description$	= ""	doc = "Description of enchantment being applied to the caster";
property float	spawn_radius$		= -1.0	doc = "Used to find a position for the summon";
property bool	monster_summon$		= false	doc	= "Is a monster casting this spell?";

owner = GoSkritComponent;  // the spell object (normal resp. omni go)

int starting_pos$;  // siegefx var id

Goid summoned_goid$;  // the sub-summon i.e. a swamp creature
Goid caster$;  // i.e. the witch
Goid target$;  // either the target enemy itself, or the target summon point
Goid new_point$;  // the target summon point (a go of template "point")
float summon_duration$;  // calculated from the spell's magic:effect_duration

event OnGoHandleCcMessage$( eWorldEvent e$, WorldMessage msg$ )
{
    // Omni Go
	if( ( e$ == WE_KILLED ) && ( summoned_goid$ == msg$.GetSendTo() ) ) 
	{
        // Got a CC message that our sub-summon got killed - clean up so the caster can cast the spell again
		SetState CleanUp$;
	}
}

trigger OnGoHandleMessage$( WE_WORLD_STATE_TRANSITION_DONE )
{
    // Omni Go
	if( summoned_goid$.IsValid )
	{
		if( WorldState.CurrentState == WS_SP_NIS )
		{
            // Game is entering a NIS? Make sure the sub-summon doesn't upset anything, just unsummon it right away
			SetState CleanUp$;
		}
	}
}
			
startup state CastBegin$
{
 	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ )
	{
		if( e$ == WE_REQ_CAST )
        {
			////////////////////
			// Normal Go
			
			target$ = MakeGoid( msg$.GetData1() );
			caster$ = msg$.GetSendFrom();
			new_point$ = Goid.InvalidGoid;

			if( !target$.isvalid || !caster$.isvalid )
			{
				SetState Abort$;
				return;
			}
			
			if( caster$.Go.Actor.HasGenericState( owner.Go.Magic.CasterStateName ) )
			{
				SetState Abort$;
				return;
			}

			if( spawn_radius$ > 0.0 )
			{
                // make a new point to summon at
                GoCloneReq cloneReq$ = MakeGoCloneReq( "point" );

				if( AIQuery.FindSpotRelativeToSource( target$.Go, 
														spawn_radius$ * 0.66, 
														spawn_radius$ * 1.33, 
														2.0, 
														caster$.Go.Mind.TempPos1 ) )
	   			{
					cloneReq$.StartingPos	= caster$.Go.Mind.TempPos1;
	   			} else {
					cloneReq$.StartingPos	= target$.Go.Placement.Position;
	   			}	

                cloneReq$.SnapToTerrain = true;
                cloneReq$.ForceClientAllowed = true;
                new_point$	= GoDb.SCloneGo( cloneReq$ );
                target$ = new_point$;
			}

            // target$ is decided, continue in an immediate timer callback
			This.CreateTimer( 2, 0 );

		}
        else if( e$ == WE_REQ_ACTIVATE )
        {
			////////////////////
			// Omni Go
			
			caster$ = msg$.GetSendFrom();
			summoned_goid$ = MakeGoid( msg$.GetData1() );
			
			if( !target$.IsValid || !summoned_goid$.Isvalid )
			{
				SetState CleanUp$;
				return;
			}

			// buff the summoned guy up.
			owner.go.magic.SApplyEnchantments( summoned_goid$, caster$ );

			if(!monster_summon$)
			{
				// Setup where experience will go from who this actor damages
				summoned_goid$.Go.aspect.SetExperienceBenefactor( caster$ );
				summoned_goid$.Go.aspect.SetExperienceBenefactorSkill( owner.go.magic.skillclass );
			}

			if( caster$.IsValid )
			{
				// set the right playerID so the creature will attack in a multiplayer competative game.
				summoned_goid$.Go.SsetPlayer( caster$.Go.PlayerID );
			}

			// Make this go have the same membership as the caster
			summoned_goid$.Go.Common.SCopyMembership( caster$ );

			// Watch our pet, so if he dies we can control a new pet.
            // This will CC the WE_KILLED message to us.
			GoDb.StartWatching( owner.Goid, summoned_goid$);

			summon_duration$ = owner.Go.Magic.EvaluateEffectDuration(summoned_goid$.Go, caster$.Go);

			// sub-summon is fully initialized, continue to next state after an immediate timer callback
			this.CreateTimer( 1, 0 );
		}
	}

	transition -> SummonGo$ : OnGoHandleMessage( WE_SPELL_SYNC_MID );  // Normal Go
	transition -> Stay$ : OnTimer( 1 );  // Omni Go

	Trigger OnTimer$( 2 )
	{
		////////////////////
		// Normal Go

		if( target$.IsValidMp && caster$.IsValidMp )
		{
			// Copy the reference to the starting position into SiegeFx persistant storage
			starting_pos$ = SiegeFx.AddVariable( target$.go.placement.position, owner.goid );

			// Start the visual
            // This will trigger WE_SPELL_SYNC_MID when the white cylinders conceal the target position
			SiegeFx.SRunScript( effect_script$, target$, caster$, script_params$, owner.Goid, WE_REQ_ACTIVATE );

            // Apply "Controlling Summoned" state to the caster i.e. witch so she can't cast the spell again while the sub-summon exists
			summon_duration$ = owner.Go.Magic.EvaluateEffectDuration(caster$.Go, caster$.Go);
			caster$.Go.Actor.SAddGenericState( owner.Go.Magic.CasterStateName, caster_description$, summon_duration$ + 2.0, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
		}
		else
		{
			SetState Abort$;
		}
	}
}

// The sub-summon go must be created by the normal go, because omni gos can't have an inventory
state SummonGo$
{
	////////////////////
	// Normal Go

	event OnEnterState$
	{
		if(caster$.IsValid)
		{
			if( Owner.go.Parent != NULL )
			{
				// Create new game objects as specified in delayed_pcontent block
				owner.go.inventory.AddDelayedPcontent();
			
				Go summoned_go$ = owner.go.children.get( 0 );
				
				owner.go.inventory.RSRemove( summoned_go$, false );
				summoned_go$.placement.SSetposition( SiegeFx.GetVariable( starting_pos$, owner.goid ), true );
				
				summoned_goid$ = summoned_go$.goid;
				
				if(!monster_summon$)
				{
					// Now match the alignment to whatever the caster is 
					summoned_goid$.Go.actor.ssetalignment( caster$.Go.actor.alignment );
				}
				
				// Create omni version of the spell.
                // Using the summoned go as parent of the omni spell. If you use the owner's parent, the omni will vanish together with the caster, leaving noone to control the sub-summon!
				//GoCloneReq cloneReq$ = MakeGoCloneReq( Owner.go.Parent.Goid, owner.goid );  // omni go will have same parent
				GoCloneReq cloneReq$ = MakeGoCloneReq( summoned_goid$, owner.goid );  // omni go will have the sub-summon as parent
				cloneReq$.Omni = true;
				Goid new_spell$ = GoDb.SCloneGo( cloneReq$ );
				
				// send Omni version an Activate to get it started.
				PostWorldMessage( WE_REQ_ACTIVATE, caster$, new_spell$, MakeInt( summoned_goid$ ), 0 );
			}
		}
		// delete normal version of the spell.
		SetState Finished$;
	}
}

state Stay$  // control sub-summon
{
	////////////////////
	// Omni Go

	event OnEnterState$
	{
		if( !caster$.IsValid )
		{
			SetState CleanUp$;
			return;
		}

		if (summoned_goid$.IsValid)
		{
			if(!monster_summon$)
			{
				// make summoned goid our friend
				if( summoned_goid$.Go.Mind.UnderstandsJob( JAT_GUARD ) )
				{
					summoned_goid$.Go.Mind.SDoJob( MakeJobReq( JAT_GUARD, JQ_ACTION, QP_BACK, AO_REFLEX, caster$ ) );
				}

				// we want to be able to see the dude's health
				summoned_goid$.Go.Actor.SSetCanShowHealth( true );
			}
			summoned_goid$.Go.Actor.SAddGenericState( state_name$, description$, summon_duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );
			caster$.Go.Actor.SRemoveGenericState( owner.Go.Magic.CasterStateName );	
			caster$.Go.Actor.SAddGenericState( owner.Go.Magic.CasterStateName, caster_description$, summon_duration$, caster$, owner.goid, owner.go.magic.GetMagicLevel( caster$.go ) );		

			this.CreateTimer( 1, summon_duration$ );
		}
	}

	transition -> CleanUp$: OnTimer( 1 );  // Clean up when the summon duration is over
	transition -> CleanUp$: OnGoHandleMessage( WE_SPELL_EXPIRATION_TIMER_RESET );  // Clean up when forcibly un-summoning (not directly possible for sub-summons tho)
}

state CleanUp$
{
	////////////////////
	// Omni Go

	transition -> FinishedOmni$: OnTimer( 1 );

	event OnEnterState$
	{
        // let witch cast again
		if( caster$.IsValidMp )
		{
			caster$.Go.Actor.SRemoveGenericState( owner.Go.Magic.CasterStateName );	
		}

		if( summoned_goid$.IsValidMp ) 
		{
			if ( end_script$ != "" ) 
			{
				SiegeFx.SRunScript( end_script$, summoned_goid$, summoned_goid$, script_params$, owner.Goid, WE_DAMAGED );
			}

			if(!monster_summon$)
			{
				summoned_goid$.Go.Aspect.ClearExperienceBenefactor();
				// we dont want to be able to see the dude's health anymore
				summoned_goid$.Go.Actor.SSetCanShowHealth( false );
			}

			summoned_goid$.Go.Actor.SRemoveGenericState( state_name$ );

			GoDb.StopWatching( owner.Goid, summoned_goid$);

            // don't delete the sub-summon just yet - will happen in FinishedOmni$
		}

		this.CreateTimer( 1, .1 );
	}
}
	
state Finished$
{
	////////////////////
	// Normal Go

	event OnEnterState$
	{
		// Get rid of any temporary storage
		SiegeFx.ClearVariables( owner.goid );

		if( new_point$.IsValid() )
		{
            // the sub-summon go is created & positioned, the point go is no longer needed
			PostWorldMessage( WE_REQ_DELETE, new_point$, new_point$, 1 );
		}

		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}

state FinishedOmni$
{
	////////////////////
	// Omni Go

	event OnEnterState$
	{
		if( summoned_goid$.isvalid) 
		{
            // delete the sub-summon
			GoDb.SMarkGoAndChildrenForDeletion( summoned_goid$, true, true );
		}

		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}

state Abort$
{
	////////////////////
	// Normal Go

	event OnEnterState$
	{
		// Refund the players mana
		Rules.ChangeMana( caster$, owner.go.getmagic.manacost );

		// Get rid of any temporary storage
		SiegeFx.ClearVariables( owner.goid );

		if( new_point$.IsValid() )
		{
			PostWorldMessage( WE_REQ_DELETE, new_point$, new_point$, 1 );
		}

		PostWorldMessage( WE_REQ_DELETE, owner.Goid, owner.Goid, 1 );
	}
}
